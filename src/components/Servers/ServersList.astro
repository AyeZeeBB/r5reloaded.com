---
import ServerItem from "./items/listitem.astro";
import { ServerListing } from "./items/response.astro";

const servers = ServerListing.servers;
---

<br /><br />
<input type="text" id="searchInput" placeholder="Search for servers..." />

<table class="sortable">
  <tr>
    <th class="region"><span class="sort-arrow"></span></th>
    <th class="name">Name <span class="sort-arrow"></span></th>
    <th class="players">Players <span class="sort-arrow"></span></th>
    <th class="gamemode">Gamemode <span class="sort-arrow"></span></th>
    <th class="map">Map <span class="sort-arrow"></span></th>
  </tr>
  {servers.map((server) => <ServerItem name={server.name} playlist={server.playlist} region={server.region} players={server.playerCount} minplayers={server.maxPlayers} map={server.map} />)}
</table>

<script is:inline>
$(document).ready(function () {
  $(".sortable th").click(function () {
    var table = $(this).parents("table").eq(0);
    var rows = table
      .find("tr:gt(0)")
      .toArray()
      .sort(comparer($(this).index()));
    this.asc = !this.asc;
    if (!this.asc) {
      rows = rows.reverse();
    }
    for (var i = 0; i < rows.length; i++) {
      table.append(rows[i]);
    }

    // Reset arrow icons
    table.find(".sort-arrow").html("");
    $(this)
      .find(".sort-arrow")
      .html(this.asc ? "&#9650;" : "&#9660;");
  });

  function comparer(index) {
    return function (a, b) {
      var valA = getCellValue(a, index),
        valB = getCellValue(b, index);
      if (index === 2) {
        // Check if sorting by "Players" column
        valA = parseInt(valA.split("/")[0]);
        valB = parseInt(valB.split("/")[0]);
      }
      return $.isNumeric(valA) && $.isNumeric(valB) ? valA - valB : valA.localeCompare(valB);
    };
  }

  function getCellValue(row, index) {
    return $(row).children("td").eq(index).text();
  }

  $("#searchInput").on("keyup", function () {
    var input, filter, table, tr, td, i, txtValue;
    input = $(this);
    filter = input.val().toUpperCase();
    table = $("table.sortable");
    tr = table.find("tr");

    for (i = 0; i < tr.length; i++) {
      td = tr[i].getElementsByTagName("td");
      for (var j = 0; j < td.length; j++) {
        if (td[j]) {
          txtValue = td[j].textContent || td[j].innerText;
          if (txtValue.toUpperCase().indexOf(filter) > -1) {
            tr[i].style.display = "";
            break;
          } else {
            tr[i].style.display = "none";
          }
        }
      }
    }
  });
});
</script>

<style>
  table {
    border-collapse: collapse;
    width: 100%;
    color: var(--white);
  }

  td,
  th {
    background-color: transparent;
    border-right: solid 2px var(--dark);
    border-left: solid 2px var(--dark);
    text-align: left;

    padding: 8px;
    height: 20px;
  }

  tr:nth-of-type(even) {
    background-color: #2f3335;
  }

  tr {
    background-color: #1f2122;
  }

  input {
    width: 100%;
    height: 40px;
    border-radius: 5px;
    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.06);
    border: 1px solid #ffffff;
    background-color: #2f3335;
    color: #ffffff;
    padding: 10px;
    margin-bottom: 10px;
  }

  .region {
    width: 1%;
    min-width: 0;
    text-align: center;
    padding: 1px;
  }

  .name {
    width: 40%;
    min-width: 0;
  }

  .players {
    width: 10%;
    min-width: 0px;
    text-align: center;
  }

  .gamemode {
    width: 15%;
    min-width: 0;
    text-align: center;
  }

  .map {
    width: 35% !important;
    min-width: 0;
  }

  @media (max-width: 992px) {
    .region {
      display: none;
    }

    .name {
      width: 35%;
      min-width: 0;
    }

    .players {
      width: 5%;
      min-width: 0px;
      text-align: center;
    }

    .gamemode {
      display: none;
    }

    .map {
      display: none;
    }
  }
</style>
