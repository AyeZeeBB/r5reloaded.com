---
import ServerItem from "./items/listitem.astro";

const response = await fetch("https://ms.r5reloaded.com/servers", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
});

const ServerListing = await response.json();
console.log(ServerListing);
const servers = ServerListing.servers;

let totalPlayers = 0;

servers.forEach((server) => {
  totalPlayers += Number(server.playerCount);
});

export const prerender = false;
---

<div class="welcome">
  <div class="description">
    <h1>Servers</h1>
    <div class="break"></div>
    <p>Players Online: {totalPlayers}</p>
  </div>
</div>

<br /><br />
<input type="text" id="searchInput" placeholder="Search for servers..." />

<table class="sortable">
  <tr>
    <th class="region"><span class="sort-arrow"></span></th>
    <th class="name">Name <span class="sort-arrow"></span></th>
    <th class="players">Players <span class="sort-arrow"></span></th>
    <th class="gamemode">Gamemode <span class="sort-arrow"></span></th>
    <th class="map">Map <span class="sort-arrow"></span></th>
  </tr>
  {servers.map((server) => <ServerItem name={server.name} playlist={server.playlist} region={server.region} players={server.playerCount} minplayers={server.maxPlayers} map={server.map} />)}
</table>

<div id="pagination"></div>

<script is:inline>
  $(document).ready(function () {
    var itemsPerPage = 100; // Set the number of items per page
    var currentPage = 1;

    function showPage(page) {
      var table = $("table.sortable");
      var rows = table.find("tr:gt(0)");
      var totalPages = Math.ceil(rows.length / itemsPerPage);

      rows.hide();
      rows.slice((page - 1) * itemsPerPage, page * itemsPerPage).show();

      // Update pagination links
      var pagination = $("#pagination");
      pagination.empty();

      for (var i = 1; i <= totalPages; i++) {
        //pagination.append('<a href="#" class="page-link btn" data-page="' + i + '">' + i + "</a> ");
      }

      pagination.find(".page-link").click(function (e) {
        e.preventDefault();
        currentPage = parseInt($(this).data("page"));
        showPage(currentPage);
      });
    }

    showPage(currentPage);

    $(".sortable th").click(function () {
      var table = $(this).parents("table").eq(0);
      var rows = table
        .find("tr:gt(0)")
        .toArray()
        .sort(comparer($(this).index()));
      this.asc = !this.asc;
      if (!this.asc) {
        rows = rows.reverse();
      }
      for (var i = 0; i < rows.length; i++) {
        table.append(rows[i]);
      }

      // Reset arrow icons
      table.find(".sort-arrow").html("");
      $(this)
        .find(".sort-arrow")
        .html(this.asc ? "&#9650;" : "&#9660;");

      showPage(currentPage); // Reapply pagination after sorting
    });

    function comparer(index) {
      return function (a, b) {
        var valA = getCellValue(a, index),
          valB = getCellValue(b, index);
        if (index === 2) {
          // Check if sorting by "Players" column
          valA = parseInt(valA.split("/")[0]);
          valB = parseInt(valB.split("/")[0]);
        }
        return $.isNumeric(valA) && $.isNumeric(valB) ? valA - valB : valA.localeCompare(valB);
      };
    }

    function getCellValue(row, index) {
      return $(row).children("td").eq(index).text();
    }

    $("#searchInput").on("keyup", function () {
      var input, filter, table, tr, td, i, txtValue;
      input = $(this);
      filter = input.val().toUpperCase();
      table = $("table.sortable");
      tr = table.find("tr");

      for (i = 0; i < tr.length; i++) {
        td = tr[i].getElementsByTagName("td");
        for (var j = 0; j < td.length; j++) {
          if (td[j]) {
            txtValue = td[j].textContent || td[j].innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
              tr[i].style.display = "";
              break;
            } else {
              tr[i].style.display = "none";
            }
          }
        }
      }
    });
  });
</script>

<style>
  table {
    border-collapse: collapse;
    width: 100%;
    color: var(--white);
  }

  td,
  th {
    background-color: transparent;
    border-right: solid 2px var(--dark);
    border-left: solid 2px var(--dark);
    text-align: left;

    padding: 8px;
    height: 20px;
  }

  tr:nth-of-type(even) {
    background-color: #2f3335;
  }

  tr {
    background-color: #1f2122;
  }

  input {
    width: 100%;
    height: 40px;
    border-radius: 5px;
    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.06);
    border: 1px solid #ffffff;
    background-color: #2f3335;
    color: #ffffff;
    padding: 10px;
    margin-bottom: 10px;
  }

  .btn {
    display: flex;
    width: 50px;
    height: 45px;
    margin-top: 20px;
    padding: 20px;
    font-size: 14px;
    align-items: center;
    text-transform: capitalize;
    text-decoration: none;
    justify-content: center;
    background-color: var(--white);
    color: var(--white);
    border-radius: 5px;
    transition-duration: 0.4s;
    cursor: pointer;
    border: none;
  }

  .region {
    width: 1%;
    min-width: 0;
    text-align: center;
    padding: 1px;
  }

  .name {
    width: 40%;
    min-width: 0;
  }

  .players {
    width: 10%;
    min-width: 0px;
    text-align: center;
  }

  .gamemode {
    width: 15%;
    min-width: 0;
    text-align: center;
  }

  .map {
    width: 35% !important;
    min-width: 0;
  }

  @media (max-width: 992px) {
    .region {
      display: none;
    }

    .name {
      width: 35%;
      min-width: 0;
    }

    .players {
      width: 5%;
      min-width: 0px;
      text-align: center;
    }

    .gamemode {
      display: none;
    }

    .map {
      display: none;
    }
  }

  .welcome {
    height: 200px;
    width: 100%;
    background-image: url("./img/servers.webp");
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center center;
    border-radius: 5px;
  }

  .welcome > .description {
    display: inline-block;
    width: 100%;
    justify-content: center;
    padding-top: 25px;
    padding-left: 60px;
  }

  .description p,
  .description h1 {
    font-weight: 800;
    margin-bottom: 20px;
    text-transform: uppercase;
    color: var(--white);
    text-shadow: black 0px 0 20px;
  }

  .description p {
    font-size: 35px;
  }

  .description h1 {
    line-height: 60px;
    font-size: 45px;
    margin-bottom: 25px;
  }

  @media (max-width: 992px) {
    .description p {
      font-size: 20px;
    }

    .description h1 {
      font-size: 30px;
    }
  }
</style>
