---
interface Props {
  name: string;
  playlist: string;
  region: string;
  players: number;
  minplayers: number;
  map: string;
}
const { name, playlist, region, players, minplayers, map } = Astro.props;

import CountryJson from "../../../data/json/countryname.json";
const regionimg = "img/flags/" + region.toLowerCase() + ".svg";
const mapimg = GetMapImage(map.toLowerCase());
const colorcode = players > 0 ? "color: var(--green);" : "color: var(--red);";

const GetColorCode = (str: string): [string, string] => {
  const colorMatch = str.match(/\^([0-9A-F]{6})/i);
  if (colorMatch) {
    const withoutColorCode = str.replace(/\^([0-9A-F]{8})/i, "");
    return [`color: #${colorMatch[1]};`, withoutColorCode];
  }
  return ["", str];
};

const [colorcode2, serverName] = GetColorCode(name);

function GetGamemode(playlist) {
  switch (playlist) {
    case "fs_dm":
      return "TDM";
    case "fs_prophunt":
      return "Prophunt";
    case "fs_1v1":
      return "1v1";
    case "fs_duckhunt":
      return "Duckhunt";
    case "fs_mantlejumppractice":
      return "Mantle Jump";
    case "fs_infected":
      return "Infected";
    case "custom_tdm":
      return "TDM";
    case "custom_ctf":
      return "Capture The Flag";
    case "survival":
      return "Battle Royal";
    case "fs_movementgym":
      return "Movement Gym";
    case "fs_survival_solos":
      return "BR Solo";
    default:
      return playlist;
  }
}

function GetMapImage(mapname) {
  switch (mapname) {
    case "mp_rr_canyonlands_staging":
      return "img/maps/mp_rr_canyonlands_staging.webp";
    case "mp_rr_aqueduct":
      return "img/maps/mp_rr_aqueduct.webp";
    case "mp_rr_aqueduct_night":
      return "img/maps/mp_rr_aqueduct_night.webp";
    case "mp_rr_ashs_redemption":
      return "img/maps/mp_rr_ashs_redemption.webp";
    case "mp_rr_canyonlands_64k_x_64k":
      return "img/maps/mp_rr_canyonlands_64k_x_64k.webp";
    case "mp_rr_canyonlands_mu1":
      return "img/maps/mp_rr_canyonlands_mu1.webp";
    case "mp_rr_canyonlands_mu1_night":
      return "img/maps/mp_rr_canyonlands_mu1_night.webp";
    case "mp_rr_desertlands_64k_x_64k":
      return "img/maps/mp_rr_desertlands_64k_x_64k.webp";
    case "mp_rr_desertlands_64k_x_64k_nx":
      return "img/maps/mp_rr_desertlands_64k_x_64k_nx.webp";
    case "mp_rr_desertlands_64k_x_64k_tt":
      return "img/maps/mp_rr_desertlands_64k_x_64k_tt.webp";
    case "mp_rr_arena_composite":
      return "img/maps/mp_rr_arena_composite.webp";
    case "mp_rr_arena_skygarden":
      return "img/maps/mp_rr_arena_skygarden.webp";
    case "mp_rr_party_crasher":
      return "img/maps/mp_rr_party_crasher.webp";
    case "mp_lobby":
      return "img/maps/mp_lobby.webp";
    default:
      return "img/flags/xx.svg";
  }
}

function GetMapName(mapname) {
  switch (mapname) {
    case "mp_rr_canyonlands_staging":
      return "Firing Range";
    case "mp_rr_aqueduct":
      return "Overflow";
    case "mp_rr_aqueduct_night":
      return "Overflow After Dark";
    case "mp_rr_ashs_redemption":
      return "Ashs Redemption";
    case "mp_rr_canyonlands_64k_x_64k":
      return "Kings Canyon S1";
    case "mp_rr_canyonlands_mu1":
      return "Kings Canyon S2";
    case "mp_rr_canyonlands_mu1_night":
      return "Kings Canyon S2 After Dark";
    case "mp_rr_desertlands_64k_x_64k":
      return "Worlds Edge";
    case "mp_rr_desertlands_64k_x_64k_nx":
      return "Worlds Edge After Dark";
    case "mp_rr_desertlands_64k_x_64k_tt":
      return "Worlds Edge Mirage Voyage";
    case "mp_rr_arena_composite":
      return "Drop Off";
    case "mp_rr_arena_skygarden":
      return "Encore";
    case "mp_rr_party_crasher":
      return "Party Crasher";
    case "mp_lobby":
      return "Lobby";
    default:
      return mapname;
  }
}
---

<tr>
  <td class="region"><img class="regionimg" src={regionimg} title={CountryJson[region]} /></td>
  <td class="name" style={colorcode2}>{serverName}</td>
  <td class="players">{players}/{minplayers}</td>
  <td class="gamemode">{GetGamemode(playlist)}</td>
  <td class="map"><img class="regionimg" src={mapimg} title={GetMapName(map)} />{GetMapName(map)}</td>
</tr>

<style>
  table {
    border-collapse: collapse;
    width: 100%;
    color: var(--white);
  }

  td,
  th {
    background-color: transparent;
    border-right: solid 2px var(--dark);
    border-left: solid 2px var(--dark);
    text-align: left;

    padding: 8px;
    height: 20px;
  }

  tr:nth-of-type(even) {
    background-color: #2f3335;
  }

  tr {
    background-color: #1f2122;
  }

  .region {
    width: 1%;
    min-width: 0;
    text-align: center;
    padding: 2px;
  }

  .region > img {
    width: 50px;
    border-radius: 2px;
  }

  .name {
    width: 52%;
    min-width: 0;
  }

  .players {
    width: 5%;
    min-width: 0px;
    text-align: center;
  }

  .gamemode {
    width: 15%;
    min-width: 0;
    text-align: center;
  }

  .map {
    width: 35%;
    min-width: 0;
  }

  .map > img {
    width: 49px;
    margin-right: 10px;
    border-radius: 3px;
  }

  @media (max-width: 992px) {
    .region {
      display: none;
    }

    .name {
      width: 40%;
      min-width: 0;
    }

    .players {
      width: 5%;
      min-width: 0px;
      text-align: center;
    }

    .gamemode {
      display: none;
    }

    .map {
      display: none;
    }
  }
</style>
